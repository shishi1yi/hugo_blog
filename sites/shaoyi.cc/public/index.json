[{"content":"项目打包到Maven 私服 配置Maven 配置私服仓库的用户和密码\n在maven安装目录 /conf/setting.xml 中的servers下添加 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;servers\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;nexus-snapshots\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;admin\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;nexus-releases\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;admin\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;123456\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt; \u0026lt;/servers\u0026gt; 在需要打包的maven模块中，配置pom文件内容 在maven工程的pom.xml配置部署的仓库，注意pom.xml和setting.xml中的id属性要一致\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;!-- 发布maven私服 --\u0026gt; \u0026lt;distributionManagement\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;nexus-snapshots\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;shishiyi-framework-SNAPSHOTS\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://127.0.0.1:30010/repository/3rd-part/\u0026lt;/url\u0026gt; // 私服仓库对应的url \u0026lt;/repository\u0026gt; \u0026lt;snapshotRepository\u0026gt; \u0026lt;id\u0026gt;nexus-repository\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;shishiyi-framework-REPOSITORY\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://127.0.0.1:30010/repository/3rd-part/\u0026lt;/url\u0026gt; \u0026lt;/snapshotRepository\u0026gt; \u0026lt;/distributionManagement\u0026gt; 使用deploy命令上传 mvn source:jar deploy -Dmaven.test.skip=true\n项目获取私服仓库中的包 在项目根部的pom文件中添加下列内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;!-- 远程nexus仓库 --\u0026gt; \u0026lt;repositories\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;nexus-snapshots\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;http://127.0.0.1:30010/repository/3rd-part/\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;repository\u0026gt; \u0026lt;id\u0026gt;nexus-repository\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;http://127.0.0.1:30010/repository/3rd-part/\u0026lt;/url\u0026gt; \u0026lt;/repository\u0026gt; \u0026lt;/repositories\u0026gt; \u0026lt;pluginRepositories\u0026gt; \u0026lt;pluginRepository\u0026gt; \u0026lt;id\u0026gt;nexus-snapshots\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;http://127.0.0.1:30010/repository/3rd-part/\u0026lt;/url\u0026gt; \u0026lt;/pluginRepository\u0026gt; \u0026lt;pluginRepository\u0026gt; \u0026lt;id\u0026gt;nexus-repository\u0026lt;/id\u0026gt; \u0026lt;url\u0026gt;http://127.0.0.1:30010/repository/3rd-part/\u0026lt;/url\u0026gt; \u0026lt;/pluginRepository\u0026gt; \u0026lt;/pluginRepositories\u0026gt; ","permalink":"http://shaoyi.cc/posts/blog/maven%E7%A7%81%E6%9C%8D/maven-%E7%A7%81%E6%9C%8D/","summary":"项目打包到Maven 私服 配置Maven 配置私服仓库的用户和密码 在maven安装目录 /conf/setting.xml 中的servers下添加 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;servers\u0026gt; \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;nexus-snapshots\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;admin\u0026lt;/username\u0026gt;","title":"Maven 私服"},{"content":"Jenkins构建 前端构建 创建一个【自由风格】的任务 点击【源码管理】 填写（选择）项目仓库的地址和用户\n指定要构建的版本，即项目仓库的远程版本号\n选择nodejs版本 如果没有选项，说明当前jenkins 没有安装\n填写构建的命令 这个命令取决于具体工程，和本地第一次执行命令基本一致\n例如：node -v \u0026amp;\u0026amp; npm install -g yarn@1.22.19 \u0026amp;\u0026amp; yarn -v \u0026amp;\u0026amp; yarn install \u0026ndash;pure-lockfile \u0026amp;\u0026amp; yarn run build \u0026amp;\u0026amp; cd dist \u0026amp;\u0026amp; tar -zcvf dist.tar.gz *\n上述例子意思大致为，获取项目依赖，并打包构建，然后把打好的包压缩\n传输打包的文件到指定服务器 【SSH Server】：选择要传输文件的服务器\nTransfers\n【Source files】：写你要传输的文件路径 【Remove prefix】：要去掉的前缀，不写远程服务器的目录结构将和Source files写的一致 【Remote directory】：写你要部署在远程服务器的那个目录地址下，不写就是SSH Servers配置里默认远程目录 【Exec command】：传输完了要执行的命令，图中例子是 进入目录,解压缩,解压缩完成后删除压缩包三个命令 后端构建 创建maven任务 任务的全局设置 指定jdk版本 点击【源码管理】 填写（选择）项目仓库的地址和用户\n指定要构建的版本，即项目仓库的远程版本号\n构建时，指定pom文件 跳过测试构建（非必须） 设置只用构建成功的包 传输打包的文件到指定服务器 【SSH Server】：选择要传输文件的服务器\nTransfers\n【Source files】：写你要传输的文件路径 【Remove prefix】：要去掉的前缀，不写远程服务器的目录结构将和Source files写的一致 【Remote directory】：写你要部署在远程服务器的那个目录地址下，不写就是SSH Servers配置里默认远程目录 【Exec command】：传输完了要执行的命令 Jenkins自动化构建（钩子） 设置触发自动化构建的条件 下图框中部分为触发自动构建的条件，本例子触发条件的为【提交事件】\n设置分支过滤 本例没有做限制\nGitLab设置 复制URL\n点击Generate按钮，token就会自动生成Secret token\nURL和Secret token，设置在对应的仓库中 测试 GitLab页面提示下图内容，则成功触发Jenkins构建任务 Jenkins构建历史已有记录 项目配置私服 仓库setting.xml文件配置私服用户密码 由于jenkins是docker部署的，会牵扯到一个访问地址\n如果是本地获取私服包，则需要在项目的根部pom.xml 配置私服地址 注：id要和setting.xml文件中一致\n如果是Jenkins构建，则需要把项目的根部pom.xml 改成下图中的ip\n","permalink":"http://shaoyi.cc/posts/blog/jenkins%E6%9E%84%E5%BB%BA/jenkins-%E6%9E%84%E5%BB%BA/","summary":"Jenkins构建 前端构建 创建一个【自由风格】的任务 点击【源码管理】 填写（选择）项目仓库的地址和用户 指定要构建的版本，即项目仓库的远程版本号","title":"Jenkins部署"},{"content":"关于我\n","permalink":"http://shaoyi.cc/about/","summary":"关于我","title":"🙋🏻‍♂️关于"}]